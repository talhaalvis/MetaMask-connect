{"version":3,"file":"index.cjs.js","sources":["../src/constants/values.ts","../src/constants/rpc.ts","../src/EthereumProvider.ts","../src/index.ts"],"sourcesContent":["export const PROTOCOL = \"wc\";\nexport const WC_VERSION = 2;\nexport const CONTEXT = \"ethereum_provider\";\nexport const STORAGE_KEY = `${PROTOCOL}@${WC_VERSION}:${CONTEXT}:`;\nexport const RPC_URL = \"https://rpc.walletconnect.com/v1/\";\n","export const REQUIRED_METHODS = [\"eth_sendTransaction\", \"personal_sign\"];\nexport const OPTIONAL_METHODS = [\n  \"eth_accounts\",\n  \"eth_requestAccounts\",\n  \"eth_call\",\n  \"eth_getBalance\",\n  \"eth_sendRawTransaction\",\n  \"eth_sign\",\n  \"eth_signTransaction\",\n  \"eth_signTypedData\",\n  \"eth_signTypedData_v3\",\n  \"eth_signTypedData_v4\",\n  \"wallet_switchEthereumChain\",\n  \"wallet_addEthereumChain\",\n  \"wallet_getPermissions\",\n  \"wallet_requestPermissions\",\n  \"wallet_registerOnboarding\",\n  \"wallet_watchAsset\",\n  \"wallet_scanQRCode\",\n];\nexport const REQUIRED_EVENTS = [\"chainChanged\", \"accountsChanged\"];\nexport const OPTIONAL_EVENTS = [\"message\", \"disconnect\", \"connect\"];\n","import { EventEmitter } from \"events\";\nimport { getAccountsFromNamespaces, getSdkError, isValidArray } from \"@walletconnect/utils\";\nimport {\n  IEthereumProvider as IProvider,\n  IEthereumProviderEvents,\n  ProviderAccounts,\n  RequestArguments,\n} from \"./types\";\nimport { Metadata, Namespace, UniversalProvider } from \"@walletconnect/universal-provider\";\nimport type { WalletConnectModalConfig, WalletConnectModal } from \"@walletconnect/modal\";\nimport { SessionTypes, SignClientTypes } from \"@walletconnect/types\";\nimport { STORAGE_KEY, REQUIRED_METHODS, REQUIRED_EVENTS, RPC_URL } from \"./constants\";\n\nexport type QrModalOptions = Pick<\n  WalletConnectModalConfig,\n  | \"themeMode\"\n  | \"themeVariables\"\n  | \"chainImages\"\n  | \"desktopWallets\"\n  | \"enableExplorer\"\n  | \"explorerRecommendedWalletIds\"\n  | \"explorerExcludedWalletIds\"\n  | \"mobileWallets\"\n  | \"privacyPolicyUrl\"\n  | \"termsOfServiceUrl\"\n  | \"tokenImages\"\n  | \"walletImages\"\n>;\n\nexport type RpcMethod =\n  | \"personal_sign\"\n  | \"eth_sendTransaction\"\n  | \"eth_accounts\"\n  | \"eth_requestAccounts\"\n  | \"eth_call\"\n  | \"eth_getBalance\"\n  | \"eth_sendRawTransaction\"\n  | \"eth_sign\"\n  | \"eth_signTransaction\"\n  | \"eth_signTypedData\"\n  | \"eth_signTypedData_v3\"\n  | \"eth_signTypedData_v4\"\n  | \"wallet_switchEthereumChain\"\n  | \"wallet_addEthereumChain\"\n  | \"wallet_getPermissions\"\n  | \"wallet_requestPermissions\"\n  | \"wallet_registerOnboarding\"\n  | \"wallet_watchAsset\"\n  | \"wallet_scanQRCode\";\n\nexport type RpcEvent = \"accountsChanged\" | \"chainChanged\" | \"message\" | \"disconnect\" | \"connect\";\n\nexport interface EthereumRpcMap {\n  [chainId: string]: string;\n}\n\nexport interface SessionEvent {\n  event: { name: string; data: any };\n  chainId: string;\n}\n\nexport interface EthereumRpcConfig {\n  chains: string[];\n  optionalChains?: string[];\n  methods: string[];\n  optionalMethods?: string[];\n  /**\n   * @description Events that the wallet MUST support or the connection will be rejected\n   */\n  events: string[];\n  optionalEvents?: string[];\n  rpcMap: EthereumRpcMap;\n  projectId: string;\n  metadata?: Metadata;\n  showQrModal: boolean;\n  qrModalOptions?: QrModalOptions;\n}\nexport interface ConnectOps {\n  chains?: number[];\n  optionalChains?: number[];\n  rpcMap?: EthereumRpcMap;\n  pairingTopic?: string;\n}\n\nexport interface IEthereumProvider extends IProvider {\n  connect(opts?: ConnectOps | undefined): Promise<void>;\n}\n\nexport function getRpcUrl(chainId: string, rpc: EthereumRpcConfig): string | undefined {\n  let rpcUrl: string | undefined;\n  if (rpc.rpcMap) {\n    rpcUrl = rpc.rpcMap[getEthereumChainId([chainId])];\n  }\n  return rpcUrl;\n}\n\nexport function getEthereumChainId(chains: string[]): number {\n  return Number(chains[0].split(\":\")[1]);\n}\n\nexport function toHexChainId(chainId: number): string {\n  return `0x${chainId.toString(16)}`;\n}\n\nexport type NamespacesParams = {\n  chains: EthereumRpcConfig[\"chains\"];\n  optionalChains?: EthereumRpcConfig[\"optionalChains\"];\n  methods?: EthereumRpcConfig[\"methods\"];\n  optionalMethods?: EthereumRpcConfig[\"methods\"];\n  events?: EthereumRpcConfig[\"events\"];\n  rpcMap: EthereumRpcConfig[\"rpcMap\"];\n  optionalEvents?: EthereumRpcConfig[\"events\"];\n};\n\nexport function buildNamespaces(params: NamespacesParams): {\n  required: Namespace;\n  optional?: Namespace;\n} {\n  const { chains, optionalChains, methods, optionalMethods, events, optionalEvents, rpcMap } =\n    params;\n  if (!isValidArray(chains)) {\n    throw new Error(\"Invalid chains\");\n  }\n\n  const requiredChains = chains;\n  const requiredMethods = methods || REQUIRED_METHODS;\n  const requiredEvents = events || REQUIRED_EVENTS;\n  const requiredRpcMap = {\n    [getEthereumChainId(requiredChains)]: rpcMap[getEthereumChainId(requiredChains)],\n  };\n\n  const required: Namespace = {\n    chains: requiredChains,\n    methods: requiredMethods,\n    events: requiredEvents,\n    rpcMap: requiredRpcMap,\n  };\n\n  // make a list of events and methods that require additional permissions\n  // so we know if we should to include the required chains in the optional namespace\n  const eventsRequiringPermissions = events?.filter((event) => !REQUIRED_EVENTS.includes(event));\n  const methodsRequiringPermissions = methods?.filter((event) => !REQUIRED_METHODS.includes(event));\n\n  if (\n    !optionalChains &&\n    !optionalEvents &&\n    !optionalMethods &&\n    !eventsRequiringPermissions?.length &&\n    !methodsRequiringPermissions?.length\n  ) {\n    return { required };\n  }\n\n  /*\n   * decides whether or not to include the required chains in the optional namespace\n   * use case: if there is a single chain as required but additonal methods/events as optional\n   */\n  const shouldIncludeRequiredChains =\n    (eventsRequiringPermissions?.length && methodsRequiringPermissions?.length) || !optionalChains;\n\n  const optional: Namespace = {\n    chains: [\n      ...new Set(\n        shouldIncludeRequiredChains ? requiredChains.concat(optionalChains || []) : optionalChains,\n      ),\n    ],\n    methods: [...new Set(requiredMethods.concat(optionalMethods || []))],\n    events: [...new Set(requiredEvents.concat(optionalEvents || []))],\n    rpcMap,\n  };\n\n  return { required, optional };\n}\n\nexport interface EthereumProviderOptions {\n  projectId: string;\n  /**\n   * @note Chains that your app intents to use and the peer MUST support. If the peer does not support these chains, the connection will be rejected.\n   * @default [1]\n   * @example [1, 3, 4, 5, 42]\n   */\n  chains: number[];\n  /**\n   * @note Optional chains that your app MAY attempt to use and the peer MAY support. If the peer does not support these chains, the connection will still be established.\n   * @default [1]\n   * @example [1, 3, 4, 5, 42]\n   */\n  optionalChains?: number[];\n  /**\n   * @note Methods that your app intents to use and the peer MUST support. If the peer does not support these methods, the connection will be rejected.\n   * @default [\"eth_sendTransaction\", \"personal_sign\"]\n   */\n  methods?: string[];\n  /**\n   * @note Methods that your app MAY attempt to use and the peer MAY support. If the peer does not support these methods, the connection will still be established.\n   */\n  optionalMethods?: string[];\n  events?: string[];\n  optionalEvents?: string[];\n  rpcMap?: EthereumRpcMap;\n  metadata?: Metadata;\n  showQrModal: boolean;\n  qrModalOptions?: QrModalOptions;\n  disableProviderPing?: boolean;\n}\n\nexport class EthereumProvider implements IEthereumProvider {\n  public events = new EventEmitter();\n  public namespace = \"eip155\";\n  public accounts: string[] = [];\n  public signer: InstanceType<typeof UniversalProvider>;\n  public chainId = 1;\n  public modal?: WalletConnectModal;\n\n  protected rpc: EthereumRpcConfig;\n  protected readonly STORAGE_KEY = STORAGE_KEY;\n\n  constructor() {\n    // assigned during initialize\n    this.signer = {} as InstanceType<typeof UniversalProvider>;\n    this.rpc = {} as EthereumRpcConfig;\n  }\n\n  static async init(opts: EthereumProviderOptions): Promise<EthereumProvider> {\n    const provider = new EthereumProvider();\n    await provider.initialize(opts);\n    return provider;\n  }\n\n  public async request<T = unknown>(args: RequestArguments): Promise<T> {\n    return await this.signer.request(args, this.formatChainId(this.chainId));\n  }\n\n  public sendAsync(\n    args: RequestArguments,\n    callback: (error: Error | null, response: any) => void,\n  ): void {\n    this.signer.sendAsync(args, callback, this.formatChainId(this.chainId));\n  }\n\n  get connected(): boolean {\n    if (!this.signer.client) return false;\n    return this.signer.client.core.relayer.connected;\n  }\n\n  get connecting(): boolean {\n    if (!this.signer.client) return false;\n    return this.signer.client.core.relayer.connecting;\n  }\n\n  public async enable(): Promise<ProviderAccounts> {\n    if (!this.session) await this.connect();\n    const accounts = await this.request({ method: \"eth_requestAccounts\" });\n    return accounts as ProviderAccounts;\n  }\n\n  public async connect(opts?: ConnectOps): Promise<void> {\n    if (!this.signer.client) {\n      throw new Error(\"Provider not initialized. Call init() first\");\n    }\n\n    this.loadConnectOpts(opts);\n    const { required, optional } = buildNamespaces(this.rpc);\n    try {\n      const session = await new Promise<SessionTypes.Struct | undefined>(\n        async (resolve, reject) => {\n          if (this.rpc.showQrModal) {\n            this.modal?.subscribeModal((state) => {\n              // the modal was closed so reject the promise\n              if (!state.open && !this.signer.session) {\n                this.signer.abortPairingAttempt();\n                reject(new Error(\"Connection request reset. Please try again.\"));\n              }\n            });\n          }\n          await this.signer\n            .connect({\n              namespaces: {\n                [this.namespace]: required,\n              },\n              ...(optional && {\n                optionalNamespaces: {\n                  [this.namespace]: optional,\n                },\n              }),\n              pairingTopic: opts?.pairingTopic,\n            })\n            .then((session) => {\n              resolve(session);\n            })\n            .catch((error: Error) => {\n              reject(new Error(error.message));\n            });\n        },\n      );\n\n      if (!session) return;\n      this.setChainIds(this.rpc.chains);\n      const accounts = getAccountsFromNamespaces(session.namespaces, [this.namespace]);\n      this.setAccounts(accounts);\n      this.events.emit(\"connect\", { chainId: toHexChainId(this.chainId) });\n    } catch (error) {\n      this.signer.logger.error(error);\n      throw error;\n    } finally {\n      if (this.modal) this.modal.closeModal();\n    }\n  }\n\n  public async disconnect(): Promise<void> {\n    if (this.session) {\n      await this.signer.disconnect();\n    }\n    this.reset();\n  }\n\n  public on: IEthereumProviderEvents[\"on\"] = (event, listener) => {\n    this.events.on(event, listener);\n    return this;\n  };\n\n  public once: IEthereumProviderEvents[\"once\"] = (event, listener) => {\n    this.events.once(event, listener);\n    return this;\n  };\n\n  public removeListener: IEthereumProviderEvents[\"removeListener\"] = (event, listener) => {\n    this.events.removeListener(event, listener);\n    return this;\n  };\n\n  public off: IEthereumProviderEvents[\"off\"] = (event, listener) => {\n    this.events.off(event, listener);\n    return this;\n  };\n\n  get isWalletConnect() {\n    return true;\n  }\n\n  get session() {\n    return this.signer.session;\n  }\n\n  // ---------- Protected --------------------------------------------- //\n\n  protected registerEventListeners() {\n    this.signer.on(\"session_event\", (payload: SignClientTypes.EventArguments[\"session_event\"]) => {\n      const { params } = payload;\n      const { event } = params;\n      if (event.name === \"accountsChanged\") {\n        this.accounts = this.parseAccounts(event.data);\n        this.events.emit(\"accountsChanged\", this.accounts);\n      } else if (event.name === \"chainChanged\") {\n        this.setChainId(this.formatChainId(event.data));\n      } else {\n        this.events.emit(event.name as any, event.data);\n      }\n      this.events.emit(\"session_event\", payload);\n    });\n\n    this.signer.on(\"chainChanged\", (chainId: string) => {\n      const chain = parseInt(chainId);\n      this.chainId = chain;\n      this.events.emit(\"chainChanged\", toHexChainId(this.chainId));\n      this.persist();\n    });\n\n    this.signer.on(\n      \"session_update\",\n      (payload: SignClientTypes.EventArguments[\"session_update\"]) => {\n        this.events.emit(\"session_update\", payload);\n      },\n    );\n\n    this.signer.on(\n      \"session_delete\",\n      (payload: SignClientTypes.EventArguments[\"session_delete\"]) => {\n        this.reset();\n        this.events.emit(\"session_delete\", payload);\n        this.events.emit(\"disconnect\", {\n          ...getSdkError(\"USER_DISCONNECTED\"),\n          data: payload.topic,\n          name: \"USER_DISCONNECTED\",\n        });\n      },\n    );\n\n    this.signer.on(\"display_uri\", (uri: string) => {\n      if (this.rpc.showQrModal) {\n        // to refresh the QR we have to close the modal and open it again\n        // until proper API is provided by walletconnect modal\n        this.modal?.closeModal();\n        this.modal?.openModal({ uri });\n      }\n      this.events.emit(\"display_uri\", uri);\n    });\n  }\n\n  protected setHttpProvider(chainId: number): void {\n    this.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: chainId.toString(16) }],\n    });\n  }\n\n  protected isCompatibleChainId(chainId: string): boolean {\n    return typeof chainId === \"string\" ? chainId.startsWith(`${this.namespace}:`) : false;\n  }\n\n  protected formatChainId(chainId: number): string {\n    return `${this.namespace}:${chainId}`;\n  }\n\n  protected parseChainId(chainId: string): number {\n    return Number(chainId.split(\":\")[1]);\n  }\n\n  protected setChainIds(chains: string[]) {\n    const compatible = chains.filter((x) => this.isCompatibleChainId(x));\n    const chainIds = compatible.map((c) => this.parseChainId(c));\n    if (chainIds.length) {\n      this.chainId = chainIds[0];\n      this.events.emit(\"chainChanged\", toHexChainId(this.chainId));\n      this.persist();\n    }\n  }\n\n  protected setChainId(chain: string) {\n    if (this.isCompatibleChainId(chain)) {\n      const chainId = this.parseChainId(chain);\n      this.chainId = chainId;\n      this.setHttpProvider(chainId);\n    }\n  }\n\n  protected parseAccountId(account: string): { chainId: string; address: string } {\n    const [namespace, reference, address] = account.split(\":\");\n    const chainId = `${namespace}:${reference}`;\n    return { chainId, address };\n  }\n\n  protected setAccounts(accounts: string[]) {\n    this.accounts = accounts\n      .filter((x) => this.parseChainId(this.parseAccountId(x).chainId) === this.chainId)\n      .map((x) => this.parseAccountId(x).address);\n    this.events.emit(\"accountsChanged\", this.accounts);\n  }\n\n  protected getRpcConfig(opts: EthereumProviderOptions): EthereumRpcConfig {\n    return {\n      chains: opts.chains?.map((chain) => this.formatChainId(chain)) || [`${this.namespace}:1`],\n      optionalChains: opts.optionalChains\n        ? opts.optionalChains.map((chain) => this.formatChainId(chain))\n        : undefined,\n      methods: opts?.methods || REQUIRED_METHODS,\n      events: opts?.events || REQUIRED_EVENTS,\n      optionalMethods: opts?.optionalMethods || [],\n      optionalEvents: opts?.optionalEvents || [],\n      rpcMap:\n        opts?.rpcMap ||\n        this.buildRpcMap(opts.chains.concat(opts.optionalChains || []), opts.projectId),\n      showQrModal: Boolean(opts?.showQrModal),\n      qrModalOptions: opts?.qrModalOptions ?? undefined,\n      projectId: opts.projectId,\n      metadata: opts.metadata,\n    };\n  }\n\n  protected buildRpcMap(chains: number[], projectId: string): EthereumRpcMap {\n    const map: EthereumRpcMap = {};\n    chains.forEach((chain) => {\n      map[chain] = this.getRpcUrl(chain, projectId);\n    });\n    return map;\n  }\n\n  protected async initialize(opts: EthereumProviderOptions) {\n    this.rpc = this.getRpcConfig(opts);\n    this.chainId = getEthereumChainId(this.rpc.chains);\n    this.signer = await UniversalProvider.init({\n      projectId: this.rpc.projectId,\n      metadata: this.rpc.metadata,\n      disableProviderPing: opts.disableProviderPing,\n    });\n    this.registerEventListeners();\n    await this.loadPersistedSession();\n    if (this.rpc.showQrModal) {\n      let WalletConnectModalClass;\n      try {\n        const { WalletConnectModal } = await import(\"@walletconnect/modal\");\n        WalletConnectModalClass = WalletConnectModal;\n      } catch {\n        throw new Error(\"To use QR modal, please install @walletconnect/modal package\");\n      }\n      if (WalletConnectModalClass) {\n        try {\n          this.modal = new WalletConnectModalClass({\n            walletConnectVersion: 2,\n            projectId: this.rpc.projectId,\n            standaloneChains: this.rpc.chains,\n            ...this.rpc.qrModalOptions,\n          });\n        } catch (e) {\n          this.signer.logger.error(e);\n          throw new Error(\"Could not generate WalletConnectModal Instance\");\n        }\n      }\n    }\n  }\n\n  protected loadConnectOpts(opts?: ConnectOps) {\n    if (!opts) return;\n    const { chains, optionalChains, rpcMap } = opts;\n    if (chains && isValidArray(chains)) {\n      this.rpc.chains = chains.map((chain) => this.formatChainId(chain));\n      chains.forEach((chain) => {\n        this.rpc.rpcMap[chain] = rpcMap?.[chain] || this.getRpcUrl(chain);\n      });\n    }\n    if (optionalChains && isValidArray(optionalChains)) {\n      this.rpc.optionalChains = [];\n      this.rpc.optionalChains = optionalChains?.map((chain) => this.formatChainId(chain));\n      optionalChains.forEach((chain) => {\n        this.rpc.rpcMap[chain] = rpcMap?.[chain] || this.getRpcUrl(chain);\n      });\n    }\n  }\n\n  protected getRpcUrl(chainId: number, projectId?: string): string {\n    const providedRpc = this.rpc.rpcMap?.[chainId];\n    return (\n      providedRpc ||\n      `${RPC_URL}?chainId=eip155:${chainId}&projectId=${projectId || this.rpc.projectId}`\n    );\n  }\n\n  protected async loadPersistedSession() {\n    if (!this.session) return;\n    const chainId = await this.signer.client.core.storage.getItem(`${this.STORAGE_KEY}/chainId`);\n    this.setChainIds(\n      chainId ? [this.formatChainId(chainId)] : this.session.namespaces[this.namespace].accounts,\n    );\n    this.setAccounts(this.session.namespaces[this.namespace].accounts);\n  }\n\n  protected reset() {\n    this.chainId = 1;\n    this.accounts = [];\n  }\n\n  protected persist() {\n    if (!this.session) return;\n    this.signer.client.core.storage.setItem(`${this.STORAGE_KEY}/chainId`, this.chainId);\n  }\n\n  protected parseAccounts(payload: string | string[]): string[] {\n    if (typeof payload === \"string\" || payload instanceof String) {\n      return [this.parseAccount(payload)];\n    }\n    return payload.map((account: string) => this.parseAccount(account));\n  }\n\n  protected parseAccount = (payload: any): string => {\n    return this.isCompatibleChainId(payload) ? this.parseAccountId(payload).address : payload;\n  };\n}\n\nexport default EthereumProvider;\n","import { EthereumProvider as Provider } from \"./EthereumProvider\";\nexport const EthereumProvider = Provider;\nexport type { RpcEvent, RpcMethod } from \"./EthereumProvider\";\nexport * from \"./constants/rpc\";\nexport default Provider;\n"],"names":["chains","chainId","params","optionalChains","methods","optionalMethods","events","optionalEvents","rpcMap","isValidArray","requiredChains","requiredMethods","REQUIRED_METHODS","requiredEvents","REQUIRED_EVENTS","requiredRpcMap","required","eventsRequiringPermissions","event","methodsRequiringPermissions","shouldIncludeRequiredChains","optional","EthereumProvider","EventEmitter","STORAGE_KEY","listener","payload","opts","provider","args","callback","session","resolve","reject","_a","state","__spreadProps","__spreadValues","error","accounts","getAccountsFromNamespaces","chain","getSdkError","uri","_b","chainIds","x","c","account","namespace","reference","address","projectId","map","UniversalProvider","WalletConnectModalClass","WalletConnectModal","e","RPC_URL","Provider"],"mappings":"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"}